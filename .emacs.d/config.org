* Setup

** Set Package Sources

*** Add package repositories

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-enable-at-startup nil)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("melpa stable" . "https://stable.melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))

  (package-initialize)
#+END_SRC

** Bootstrap use-package

*** Install =use-package=

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (eval-when-compile (require 'use-package)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** Benchmark Startup

*** Record startup time by package for debug

#+BEGIN_SRC emacs-lisp
  (use-package benchmark-init
    :config
    ;; To disable collection of benchmark data after init is done.
    (add-hook 'after-init-hook 'benchmark-init/deactivate))

  (add-hook 'after-init-hook
            (lambda () (message "loaded in %s" (emacs-init-time))))
#+END_SRC

** Increased Garbage Collection

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 10000000)

  ;; Restore after startup
  (add-hook 'after-init-hook
            (lambda ()
              (setq gc-cons-threshold 1000000)
              (message "gc-cons-threshold restored to %S"
                       gc-cons-threshold)))
#+END_SRC

** Visit Configuration

*** Quickly edit =~/.emacs.d/config.org=

#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c c e") 'config-visit)
#+END_SRC

** Reloading Configuration
   
*** Simply pressing =Control-c c r= will reload this file, very handy. You can also manually invoke =config-reload=.

#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c c r") 'config-reload)
#+END_SRC


* Emacs Visual

** Themes

*** Current favorite theme solarized-dark-high-contrast

#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init (load-theme 'solarized-dark-high-contrast t))
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono-16" t t)
  (set-fontset-font t 'unicode "STIXGeneral" nil 'prepend)
#+END_SRC

** Fullscreen on Startup

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+END_SRC

** Visually highlight the selected buffer

#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :custom
    (dimmer-fraction 0.4)
    (dimmer-exclusion-regexp-list
           '(".*Minibuf.*"
             ".*which-key.*"
             ".*NeoTree.*"
             ".*Messages.*"
             ".*Async.*"
             ".*Warnings.*"
             ".*LV.*"
             ".*Ilist.*"))
    :config
    (dimmer-configure-which-key)
    (dimmer-mode t))
#+END_SRC


* Emacs Settings

** Startup Screen

*** Inhibit Startup Message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** GUI

*** Disable beeping, gui popups. Echo faster keystrokes, kill process, enable all commands

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore        ; disable beeping
	x-gtk-use-system-tooltips nil     ; disable gui popups
	use-dialog-box nil                ; disable gui popups
	echo-keystrokes 0.5               ; echo keystrokes faster
	confirm-kill-processes nil        ; kill the process
	disabled-command-function nil)    ; enable all commands
#+END_SRC

*** Hide gui funcionalities

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)                      ; hide menu-bar
  (tool-bar-mode -1)                      ; hide tool-bar
  (scroll-bar-mode -1)                    ; hide scroll-bar
  (blink-cursor-mode 0)                   ; disable blinking
  (show-paren-mode t)                     ; enable matching paren highlight
  (column-number-mode t)                  ; enable column numbers
#+END_SRC

*** Simplify yes or no

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Scroll Settings

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1)     ; gentle scrolling
	mouse-wheel-progressive-speed nil  ; disable acceleration
	scroll-conservatively 101          ; disable jump to the middle of screen
	hscroll-margin 1                   ; disable early scroll
	hscroll-step 1                     ; small step of scroll
	scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

** Line Highlighting

*** Beacon

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :init
    (beacon-mode 1))
#+END_SRC

** Suggestions

*** Which key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :init
    (which-key-mode))
#+END_SRC

** UTF-8 Encoding

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC


* Security

** TLS

#+BEGIN_SRC emacs-lisp
  (setq gnutls-verify-error t
	tls-checktrust t)
#+END_SRC


* Terminal

** Set Default Terminal

#+BEGIN_SRC emacs-lisp
  (defvar rj/terminal-shell "/bin/bash")

  (defadvice ansi-term (before force-bash)
    (interactive (list rj/terminal-shell)))

  (ad-activate 'ansi-term)
#+END_SRC

** Keymap for Launching Terminal

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC


* Command Completion

** ivy

*** install

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode t))
#+END_SRC

*** don't start filters with =^=

#+BEGIN_SRC emacs-lisp
  (setq ivy-initial-inputs-alist nil)
#+END_SRC

** counsel

counsel enhances =ivy= versions of emacs commands

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)))
#+END_SRC 

** prescient

=prescient= sorts and filters candidate lists for ivy/counsel

#+BEGIN_SRC emacs-lisp
  (use-package prescient)
  (use-package ivy-prescient
    :config
    (ivy-prescient-mode t))
#+END_SRC

** swiper

=ivy= enhanced version of isearch

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind (("C-s" . counsel-grep-or-swiper)))
#+END_SRC

** hydra

*** present menu for =ivy= commands

#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra)
#+END_SRC

*** =major-mode-hydra= binds a single key to open a context sensitive hydra based on current major mode. Hydras can be defined in =use-package= definitions via the =:mode-hydra= integration

#+BEGIN_SRC emacs-lisp
  (use-package major-mode-hydra
    :bind
    ("C-M-SPC" . major-mode-hydra)
    :config
    (major-mode-hydra-define org-mode
      ()
      ("Tools"
       (("l" org-lint "lint")))))
#+END_SRC


* Keybindings

** Control Keybinds

*** Swap “C-t” and “C-x”

#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
#+END_SRC


* Keychords

** Use key-chord

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t
    :config
    (key-chord-mode 1))
#+END_SRC


* Window

** Switch Windows

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
          '("a" "o" "e" "u" "h" "t" "n" "s" "c"))
    :bind
      ([remap other-window] . switch-window))
#+END_SRC

** Follow Splits

*** Vertical Splits

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+END_SRC

*** Horizontal Splits

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC


* Org Mode Settings

** Common

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Line Wrapping

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	      '(lambda ()
		 (visual-line-mode 1)))
#+END_SRC

** Org Bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

** Templatize emacs-lisp

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
		 '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC


* Vim
** Evil

*** Download Evil

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'evil)
    (package-install 'evil))
#+END_SRC

*** Enable Evil

#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+END_SRC

** Vimrc

*** Requirements

#+BEGIN_SRC emacs-lisp
  (require 'evil-states)
  (require 'evil-ex)
  (require 'evil-commands)
  (require 'evil-command-window)
  (require 'evil-common)
#+END_SRC

*** Window Commands

#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'evil-window-map)
  (define-key evil-window-map (kbd "j") 'evil-window-delete)
  (define-key evil-window-map (kbd "t") 'evil-window-down)
  (define-key evil-window-map (kbd "T") 'evil-window-move-very-bottom)
  (define-key evil-window-map (kbd "c") 'evil-window-up)
  (define-key evil-window-map (kbd "C") 'evil-window-move-very-top)
  (define-key evil-window-map (kbd "n") 'evil-window-right)
  (define-key evil-window-map (kbd "n") 'evil-window-move-far-right)
  (define-key evil-window-map (kbd "k") 'evil-window-new)
  (define-key evil-window-map (kbd "l") 'evil-window-top-left)
#+END_SRC

*** Motion State Commands

#+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "t") 'evil-next-line)
  (define-key evil-motion-state-map (kbd "c") 'evil-previous-line)
  (define-key evil-motion-state-map (kbd "n") 'evil-forward-char)
  (define-key evil-motion-state-map (kbd "k") 'evil-search-next)
  (define-key evil-motion-state-map (kbd "K") 'evil-search-previous)
  (define-key evil-motion-state-map (kbd "j") 'evil-find-char-to)
  (define-key evil-motion-state-map (kbd "J") 'evil-find-char-to-backward)
#+END_SRC

*** Normal State Commands

#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "t") 'evil-next-line)
  (define-key evil-normal-state-map (kbd "c") 'evil-previous-line)
  (define-key evil-normal-state-map (kbd "n") 'evil-forward-char)
#+END_SRC

*** Ex

#+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "SPC") 'evil-ex)
#+END_SRC

*** Use key-chord

#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t)
  (require 'key-chord)
  (key-chord-mode 1)
#+END_SRC

*** Map hh to Escape

#+BEGIN_SRC emacs-lisp
  (key-chord-define evil-insert-state-map (kbd "hh") 'evil-normal-state)
#+END_SRC

*** Map =kt= to Insert Line Below

Function to insert line below

#+BEGIN_SRC emacs-lisp
  (defun insert-line-below ()
    "Insert an empty line below the current line."
    (interactive)
    (save-excursion
      (end-of-line)
      (open-line 1)))
#+END_SRC

Mapping

#+BEGIN_SRC emacs-lisp
  (key-chord-define evil-normal-state-map (kbd "kt") 'insert-line-below)
#+END_SRC

*** Map =kc= to Insert Line Above

Function to insert line above

#+BEGIN_SRC emacs-lisp
  (defun insert-line-above ()
    "Insert an empty line above the current line."
    (interactive)
    (save-excursion
      (end-of-line 0)
      (open-line 1)))
#+END_SRC

Mapping

#+BEGIN_SRC emacs-lisp
  (key-chord-define evil-normal-state-map (kbd "kc") 'insert-line-above)
#+END_SRC


* Project Management

** Projectile

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :demand t
    :init (projectile-global-mode 1)
    :bind-keymap* ("C-x p" . projectile-command-map)
    :config
    (require 'projectile)
    (use-package counsel-projectile 
      :bind (("s-p" . counsel-projectile)
             ("s-f" . counsel-projectile-find-file)
             ("s-b" . counsel-projectile-switch-to-buffer)))
    (setq projectile-use-git-grep t)
    (setq projectile-completion-system 'ivy))
#+END_SRC

** Git

*** Install Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit 
    :ensure t
    :bind (("C-x g" . magit-status)
           ("C-x M-g" . magit-blame))
    :init (setq magit-auto-revert-mode nil)
    :config (add-hook 'magit-mode-hook 'hl-line-mode))
#+END_SRC

*** Display Line Changes

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter+
    :init (global-git-gutter+-mode)
    :diminish git-gutter+-mode
    :defer 5
    :config (progn
              (setq git-gutter+-modified-sign "==")
              (setq git-gutter+-added-sign "++")
              (setq git-gutter+-deleted-sign "--")))
#+END_SRC

** Navigation Bar

#+BEGIN_SRC emacs-lisp
  (use-package speedbar)

  (use-package sr-speedbar
    :ensure t
    :init
    (set-variable 'sr-speedbar-right-side nil))

  (use-package projectile-speedbar
    :ensure t
    :disabled t)

  (make-face 'speedbar-face)
  (set-face-font 'speedbar-face "Mono-12")
  (setq speedbar-mode-hook '(lambda () (buffer-face-set 'speedbar-face)))

  (setq sr-speedbar-width 10)

  (custom-set-variables
   '(speedbar-show-unknown-files t))

  (add-hook 'emacs-startup-hook (lambda ()
    (sr-speedbar-open)))
#+END_SRC

** Undo Tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :defer 1
    :config
    (eval-when-compile
      ;; Silence missing function warnings
      (declare-function global-undo-tree-mode "undo-tree.el"))
    (global-undo-tree-mode))
#+END_SRC

* Navigation 

** avy

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
      ("M-s" . avy-goto-char))
#+END_SRC

** anzu

#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :init
    (global-anzu-mode +1)
    (anzu-mode +1)
    :diminish anzu-mode)
#+END_SRC


* Parentheses

** Show Parentheses

#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC


* Modeline

** Spaceline

Enable spaceline

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC

** No Separator

#+BEGIN_SRC emacs-lisp
  (setq powerline-default-separator nil)
#+END_SRC

** Cursor Position

Show the current line and column for your cursor

#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Clock

*** Time format

#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format nil)
  (setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC

*** Enabling the mode

Turn on the clock globally

#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** Battery Indicator 

#+BEGIN_SRC emacs-lisp
  (use-package fancy-battery
    :ensure t
    :config
      (setq fancy-battery-show-percentage t)
      (setq battery-update-interval 15)
      (if window-system
        (fancy-battery-mode)
        (display-battery-mode)))
#+END_SRC

** System monitor

 Toggle symon on and off with =Super + m=.

#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-t" . symon-mode))
#+END_SRC


* Programming Mode

** Line Numbers in Programming

Relative line numbering in programming mode

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :diminish linum-relative-mode
    :config
      (setq linum-relative-current-symbol "")
      (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

** Highlight Current Line

#+BEGIN_SRC emacs-lisp
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

** Parentheses

*** Highlight Parentheses

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

*** Expand Parentheses

#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

** Color Strings

*** Highlight Strings Representing Colors

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** flycheck

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode))

  (add-hook 'c++-mode-hook
            (lambda () (setq flycheck-clang-language-standard "c++11")))
#+END_SRC

** yasnippet

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t)
#+END_SRC

** yasnippet-snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets
    :ensure t)

  (yas-reload-all)

  (yas-global-mode 1)
#+END_SRC

** company

*** install

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :init
    (setq company-clang-executable "/usr/bin/clang-3.5")
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3))

  (add-hook 'after-init-hook 'global-company-mode)

  (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-ghc))

#+END_SRC

** iedit

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :commands (iedit-mode)
    :bind* (("C-c ;" . iedit-mode)))
#+END_SRC



* Languages

** C / C++

*** Syntax Highlighting

#+BEGIN_SRC emacs-lisp
  (use-package modern-cpp-font-lock
    :ensure t)

  (modern-c++-font-lock-global-mode t)
#+END_SRC

*** irony

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

*** add =company-irony= to company backends

#+BEGIN_SRC emacs-lisp
  (use-package company-irony)

  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-irony))
#+END_SRC

*** company c / c++ headers

#+BEGIN_SRC emacs-lisp
  (use-package company-c-headers)

  (add-to-list 'company-backends 'company-c-headers)
  (add-to-list 'company-c-headers-path-system "/usr/include/c++/7/")
#+END_SRC

*** clang-format

uses a clang-format file stored in /plugins/cpp-plugins

#+BEGIN_SRC emacs-lisp
  (use-package clang-format)

  (setq clang-format-style-option "~/.emacs.d/plugins/cpp-plugins/.clang-format")

  (add-hook 'c-mode-common-hook
            (function (lambda ()
                        (add-hook 'before-save-hook
                                  'clang-format-buffer))))

  (add-hook 'c++-mode-common-hook
            (function (lambda ()
                        (add-hook 'before-save-hook
                                  'clang-format-buffer))))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'flycheck-mode)
  (add-hook 'c++-mode-hook 'flycheck-mode)
#+END_SRC

*** google c style and cpplint

#+BEGIN_SRC emacs-lisp
  (use-package google-c-style
    :ensure t
    :defer t
    :init
    (add-hook 'c-mode-common-hook 'google-set-c-style)
    (add-hook 'c-mode-common-hook 'google-make-newline-indent)

    (add-hook 'c++-mode-common-hook 'google-set-c-style)
    (add-hook 'c++-mode-common-hook 'google-make-newline-indent)

    ;; == google style guide ==
    (load "~/.emacs.d/plugins/cpp-plugins/flycheck-google-cpplint")
    (add-to-list 'flycheck-checkers 'c/c++-googlelint)
    (custom-set-variables
     '(flycheck-c/c++-googlelint-executable "~/.emacs.d/plugins/cpp-plugins/cpplint.py")
    ;; This requires that google cpplint be installed
    ;; See: https://github.com/flycheck/flycheck-google-cpplint
    (flycheck-add-next-checker 'c/c++-cppcheck 'c/c++-googlelint)))
#+END_SRC

*** CMake mode

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :ensure t
    :defer t
    :init
    ; Add cmake listfile names to the mode list.
    (setq auto-mode-alist
          (append
           '(("CMakeLists\\.txt\\'" . cmake-mode))
           '(("\\.cmake\\'" . cmake-mode))
           auto-mode-alist)))
#+END_SRC

** Python

*** Anaconda mode

#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
    :ensure t
    :config
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC

** MATLAB

*** use MATLAB mode

#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :ensure t
    :defer t
    :config (matlab-cedet-setup))
#+END_SRC


* Apps

** Stack Overflow

#+BEGIN_SRC emacs-lisp
  (use-package sx
          :ensure t
          :config
          (bind-keys :prefix "C-c s"
                                 :prefix-map my-sx-map
                                 :prefix-docstring "Global keymap for SX."
                                 ("q" . sx-tab-all-questions)
                                 ("i" . sx-inbox)
                                 ("o" . sx-open-link)
                                 ("u" . sx-tab-unanswered-my-tags)
                                 ("a" . sx-ask)
                                 ("s" . sx-search)))
#+END_SRC

** Slack

#+BEGIN_SRC emacs-lisp
  (use-package slack
	  :ensure t
	  :commands (slack-start))
#+END_SRC

** Google

#+BEGIN_SRC emacs-lisp
  (use-package google-this
	  :ensure t)
#+END_SRC


* Writing

** Writegood

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
	  :ensure t
	  :bind ("C-c g" . writegood-mode)
	  :config
	  (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

** Proselint

#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker proselint
                           "A linter for prose."
                           :command ("proselint" source-inplace)
                           :error-patterns
                           ((warning line-start (file-name) ":" line ":" column ": "
                                     (id (one-or-more (not (any " "))))
                                     (message (one-or-more not-newline)
                                              (zero-or-more "\n" (any " ") (one-or-more not-newline)))
                                     line-end))
                           :modes (text-mode markdown-mode gfm-mode org-mode))
#+END_SRC


* References

Various elements in this config have been inspired or used from the below resources:

- https://github.com/daedreth/UncleDavesEmacs
- https://jamiecollinson.com/blog/my-emacs-config/
- https://pages.sachachua.com/.emacs.d/Sacha.html
