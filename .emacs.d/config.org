* Visual
** Themes
Current favorite theme solarized-dark-high-contrast
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init (load-theme 'solarized-dark-high-contrast t))
#+END_SRC

** Font
#+BEGIN_SRC emacs-lisp
  (set-frame-font "DejaVu Sans Mono-16" t t)
  (set-fontset-font t 'unicode "STIXGeneral" nil 'prepend)
#+END_SRC

** Startup Screen
Inhibit startup message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Pretty symbols
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)
	(global-prettify-symbols-mode 0)

	(add-hook
	 'python-mode-hook
	 (lambda ()
	   (mapc (lambda (pair) (push pair prettify-symbols-alist))
			 '(("def" . "𝒇")
			   ("class" . "𝑪")
			   ("and" . "∧")
			   ("or" . "∨")
			   ("not" . "￢")
			   ("in" . "∈")
			   ("not in" . "∉")
			   ("return" . "⟼")
			   ("yield" . "⟻")
			   ("for" . "∀")
			   ("!=" . "≠")
			   ("==" . "＝")
			   (">=" . "≥")
			   ("<=" . "≤")
			   ("[]" . "⃞")
			   ("=" . "≝")))))
#+END_SRC


* Keybindings
** C- keybinds
Swap “C-t” and “C-x”
#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-t ?\C-x)
  (keyboard-translate ?\C-x ?\C-t)
#+END_SRC


* Vim
** Evil
Download Evil
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'evil)
    (package-install 'evil))
#+END_SRC

Enable Evil
#+BEGIN_SRC emacs-lisp
  (require 'evil)
  (evil-mode 1)
#+END_SRC

** Vimrc
Requirements
#+BEGIN_SRC emacs-lisp
  (require 'evil-states)
  (require 'evil-ex)
  (require 'evil-commands)
  (require 'evil-command-window)
  (require 'evil-common)
#+END_SRC

Window commands
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'evil-window-map)
  (define-key evil-window-map (kbd "j") 'evil-window-delete)
  (define-key evil-window-map (kbd "t") 'evil-window-down)
  (define-key evil-window-map (kbd "T") 'evil-window-move-very-bottom)
  (define-key evil-window-map (kbd "c") 'evil-window-up)
  (define-key evil-window-map (kbd "C") 'evil-window-move-very-top)
  (define-key evil-window-map (kbd "n") 'evil-window-right)
  (define-key evil-window-map (kbd "n") 'evil-window-move-far-right)
  (define-key evil-window-map (kbd "k") 'evil-window-new)
  (define-key evil-window-map (kbd "l") 'evil-window-top-left)
#+END_SRC

Motion state commands
#+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "t") 'evil-next-line)
  (define-key evil-motion-state-map (kbd "c") 'evil-previous-line)
  (define-key evil-motion-state-map (kbd "n") 'evil-forward-char)
  (define-key evil-motion-state-map (kbd "k") 'evil-search-next)
  (define-key evil-motion-state-map (kbd "K") 'evil-search-previous)
  (define-key evil-motion-state-map (kbd "j") 'evil-find-char-to)
  (define-key evil-motion-state-map (kbd "J") 'evil-find-char-to-backward)
#+END_SRC

Normal state commands
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "t") 'evil-next-line)
  (define-key evil-normal-state-map (kbd "c") 'evil-previous-line)
  (define-key evil-normal-state-map (kbd "n") 'evil-forward-char)
#+END_SRC

Ex
#+BEGIN_SRC emacs-lisp
  (define-key evil-motion-state-map (kbd "SPC") 'evil-ex)
#+END_SRC

Use key-chord
#+BEGIN_SRC emacs-lisp
  (use-package key-chord
    :ensure t)
  (require 'key-chord)
  (key-chord-mode 1)
#+END_SRC

Map hh to escape
#+BEGIN_SRC emacs-lisp
  (key-chord-define evil-insert-state-map (kbd "hh") 'evil-normal-state)
#+END_SRC


* General
** GUI
Disable beeping, gui popups. Echo faster keystrokes, kill process, enable all commands 
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore        ; disable beeping
	x-gtk-use-system-tooltips nil     ; disable gui popups
	use-dialog-box nil                ; disable gui popups
	echo-keystrokes 0.5               ; echo keystrokes faster
	confirm-kill-processes nil        ; kill the process
	disabled-command-function nil)    ; enable all commands
#+END_SRC

Hide gui funcionalities
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)                      ; hide menu-bar
  (tool-bar-mode -1)                      ; hide tool-bar
  (scroll-bar-mode -1)                    ; hide scroll-bar
  (blink-cursor-mode 0)                   ; disable blinking
  (show-paren-mode t)                     ; enable matching paren highlight
  (column-number-mode t)                  ; enable column numbers
#+END_SRC

Scroll settings
#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1)     ; gentle scrolling
	mouse-wheel-progressive-speed nil  ; disable acceleration
	scroll-conservatively 101          ; disable jump to the middle of screen
	hscroll-margin 1                   ; disable early scroll
	hscroll-step 1                     ; small step of scroll
	scroll-preserve-screen-position t) ; try to keep cursor in its position
#+END_SRC

Line numbers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
#+END_SRC

Highlight lines
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC

Simplify yes or no
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Files
Create centralised backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	  backup-by-copying t    ; Don't delink hardlinks
	  version-control t      ; Use version numbers on backups
	  delete-old-versions t  ; Automatically delete excess backups
	  kept-new-versions 20   ; how many of the newest versions to keep
	  kept-old-versions 5    ; and how many of the old
	  )
#+END_SRC

** Options
Winner mode
#+BEGIN_SRC emacs-lisp
  (winner-mode t)
#+END_SRC

Save options
#+BEGIN_SRC emacs-lisp
  (desktop-save-mode t)
  (save-place-mode t)
#+END_SRC

** Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

** Security
#+BEGIN_SRC emacs-lisp
  (setq gnutls-verify-error t
	tls-checktrust t)
#+END_SRC

** Enable async processes
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t
    :init (dired-async-mode 1))
#+END_SRC

** Show unnecessary whitespaces
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook
	    (lambda () (interactive)
	      (setq show-trailing-whitespace 1)))
#+END_SRC


* Editor
** Speedbar
Use speedbar
#+BEGIN_SRC emacs-lisp
  (use-package speedbar)
  
  (use-package sr-speedbar
    :ensure t
    :init
    (set-variable 'sr-speedbar-right-side nil))

  (use-package projectile-speedbar
    :ensure t
    :disabled t)

  (make-face 'speedbar-face)
  (set-face-font 'speedbar-face "Mono-12")
  (setq speedbar-mode-hook '(lambda () (buffer-face-set 'speedbar-face)))

  (setq sr-speedbar-width 10)

  (custom-set-variables
   '(speedbar-show-unknown-files t))

  (add-hook 'emacs-startup-hook (lambda ()
    (sr-speedbar-open)))
#+END_SRC


* Terminal
** Set default terminal
#+BEGIN_SRC emacs-lisp
(defvar rj/terminal-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list rj/terminal-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC


* Editing
** Basics
#+BEGIN_SRC emacs-lisp
  (setq global-mark-ring-max 5000         ; increase mark ring to contains 5000 entries
		mark-ring-max 5000                ; increase kill ring to contains 5000 entries
		mode-require-final-newline t      ; add a newline to end of file
		tab-width 4                       ; default to 4 visible spaces to display a tab
		)

  (add-hook 'sh-mode-hook (lambda ()
							(setq tab-width 4)))

  (setq-default indent-tabs-mode nil)
  (delete-selection-mode)
  (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

** Killing
#+BEGIN_SRC emacs-lisp
  (setq kill-ring-max 5000 ; increase kill-ring capacity
		kill-whole-line t  ; if NIL, kill whole line and move the next line up
		)
#+END_SRC

** Show whitespace in diff-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'diff-mode-hook (lambda ()
                              (setq-local whitespace-style
                                          '(face
                                            tabs
                                            tab-mark
                                            spaces
                                            space-mark
                                            trailing
                                            indentation::space
                                            indentation::tab
                                            newline
                                            newline-mark))
                              (whitespace-mode 1)))
#+END_SRC

** Volatile Highlights
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
	:init
	(volatile-highlights-mode t))
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
	  :ensure t
	  :chords (("UU" . undo-tree-visualize))
	  :diminish undo-tree-mode:
	  :config
	  (global-undo-tree-mode 1))
#+END_SRC

** Clean auto-indent and backspace unindent
#+BEGIN_SRC emacs-lisp
  (use-package clean-aindent-mode
	:init
	(add-hook 'prog-mode-hook 'clean-aindent-mode))
#+END_SRC

** Guess indentation offset originally used for creating source code files
#+BEGIN_SRC emacs-lisp
  (use-package dtrt-indent
	:init
	(dtrt-indent-mode 1)
	(setq dtrt-indent-verbosity 0))
#+END_SRC

** Trim spaces from eol
#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
	:init
	(add-hook 'prog-mode-hook 'ws-butler-mode)
	(add-hook 'text-mode 'ws-butler-mode)
	(add-hook 'fundamental-mode 'ws-butler-mode))
#+END_SRC

** Comments
#+BEGIN_SRC emacs-lisp
(use-package comment-dwim-2
  :bind (("M-;" . comment-dwim-2))
  )
#+END_SRC

** Anzu
#+BEGIN_SRC emacs-lisp
  (use-package anzu
	:init
	(global-anzu-mode)
	(global-set-key (kbd "M-%") 'anzu-query-replace)
	(global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp))
#+END_SRC

** Edit multiple places simultaneously
#+BEGIN_SRC emacs-lisp
  (use-package iedit
	:bind (("C-;" . iedit-mode))
	:init
	(setq iedit-toggle-key-default nil))
#+END_SRC

** Automatically indent yanked text
#+BEGIN_SRC emacs-lisp
  (defvar yank-indent-modes
	'(LaTeX-mode TeX-mode)
	"Modes in which to indent regions that are yanked (or yank-popped).
  Only modes that don't derive from `prog-mode' should be listed here.")

  (defvar yank-indent-blacklisted-modes
	'(python-mode slim-mode haml-mode)
	"Modes for which auto-indenting is suppressed.")

  (defvar yank-advised-indent-threshold 1000
	"Threshold (# chars) over which indentation does not automatically occur.")

  (defun yank-advised-indent-function (beg end)
	"Do indentation, as long as the region isn't too large."
	(if (<= (- end beg) yank-advised-indent-threshold)
		(indent-region beg end nil)))

  (defadvice yank (after yank-indent activate)
	"If current mode is one of 'yank-indent-modes,
  indent yanked text (with prefix arg don't indent)."
	(if (and (not (ad-get-arg 0))
			 (not (member major-mode yank-indent-blacklisted-modes))
			 (or (derived-mode-p 'prog-mode)
				 (member major-mode yank-indent-modes)))
		(let ((transient-mark-mode nil))
		  (yank-advised-indent-function (region-beginning) (region-end)))))

  (defadvice yank-pop (after yank-pop-indent activate)
	"If current mode is one of `yank-indent-modes',
  indent yanked text (with prefix arg don't indent)."
	(when (and (not (ad-get-arg 0))
			   (not (member major-mode yank-indent-blacklisted-modes))
			   (or (derived-mode-p 'prog-mode)
				   (member major-mode yank-indent-modes)))
	  (let ((transient-mark-mode nil))
		(yank-advised-indent-function (region-beginning) (region-end)))))
#+END_SRC

** More indenting
#+BEGIN_SRC emacs-lisp
  ;; prelude-core.el
  (defun indent-buffer ()
	"Indent the currently visited buffer."
	(interactive)
	(indent-region (point-min) (point-max)))

  ;; prelude-editing.el
  (defcustom prelude-indent-sensitive-modes
	'(coffee-mode python-mode slim-mode haml-mode yaml-mode)
	"Modes for which auto-indenting is suppressed."
	:type 'list)

  (defun indent-region-or-buffer ()
	"Indent a region if selected, otherwise the whole buffer."
	(interactive)
	(unless (member major-mode prelude-indent-sensitive-modes)
	  (save-excursion
		(if (region-active-p)
			(progn
			  (indent-region (region-beginning) (region-end))
			  (message "Indented selected region."))
		  (progn
			(indent-buffer)
			(message "Indented buffer.")))
		(whitespace-cleanup))))


  (global-set-key (kbd "C-c i") 'indent-region-or-buffer)
#+END_SRC


* Key chords
** get key chords
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
          :demand t
          :config
          (key-chord-mode t))
#+END_SRC

** easy previous buffer jump
#+BEGIN_SRC emacs-lisp
  (defun rj/switch-to-previous-buffer ()
	  "Switch to previously open buffer.
	Repeated invocations toggle between the two most recently open buffers."
	  (interactive)
	  (switch-to-buffer (other-buffer (current-buffer) 1)))

	(key-chord-define-global "HH" 'rj/switch-to-previous-buffer)
#+END_SRC


* Command completion
** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
	  :ensure t)
#+END_SRC

** ivy
#+BEGIN_SRC emacs-lisp
  (use-package ivy
		:ensure t
		:diminish ivy-mode
		:config
		(ivy-mode t))

  (setq ivy-initial-inputs-alist nil)
#+END_SRC

** counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
	  :ensure t
	  :bind (("M-x" . counsel-M-x))
	  :chords (("yy" . counsel-yank-pop)))
#+END_SRC

** swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
	  :ensure t
	  :bind (("M-s" . swiper)))
#+END_SRC

** hydra
#+BEGIN_SRC emacs-lisp
  (use-package ivy-hydra
	  :ensure t)
#+END_SRC


* Coding
** Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
	  :ensure t
	  :diminish smartparens-mode
	  :config
	  (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC

** Highlight parens
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
	  :ensure t
	  :config
	  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

** Highlight strings representing colors
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
	  :ensure t
	  :config
	  (setq rainbow-x-colors nil)
	  (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** aggressive indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
		:ensure t)
#+END_SRC

** expand parens
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC

** smart dashes
#+BEGIN_SRC emacs-lisp
  (use-package smart-dash
	  :ensure t
	  :config
	  (add-hook 'python-mode-hook 'smart-dash-mode))
#+END_SRC

** Syntax checking
Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
	  :ensure t
	  :config
	  (add-hook 'after-init-hook 'global-flycheck-mode)
	  (add-hook 'flycheck-mode-hook 'jc/use-eslint-from-node-modules)
	  (add-to-list 'flycheck-checkers 'proselint)
	  (setq-default flycheck-highlighting-mode 'lines)
	  ;; Define fringe indicator / warning levels
	  (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
		(vector #b00000000
				#b00000000
				#b00000000
				#b00000000
				#b00000000
				#b00000000
				#b00000000
				#b00011100
				#b00111110
				#b00111110
				#b00111110
				#b00011100
				#b00000000
				#b00000000
				#b00000000
				#b00000000
				#b00000000))
	  (flycheck-define-error-level 'error
		:severity 2
		:overlay-category 'flycheck-error-overlay
		:fringe-bitmap 'flycheck-fringe-bitmap-ball
		:fringe-face 'flycheck-fringe-error)
	  (flycheck-define-error-level 'warning
		:severity 1
		:overlay-category 'flycheck-warning-overlay
		:fringe-bitmap 'flycheck-fringe-bitmap-ball
		:fringe-face 'flycheck-fringe-warning)
	  (flycheck-define-error-level 'info
		:severity 0
		:overlay-category 'flycheck-info-overlay
		:fringe-bitmap 'flycheck-fringe-bitmap-ball
		:fringe-face 'flycheck-fringe-info))
#+END_SRC

** Proselint
#+BEGIN_SRC emacs-lisp
  (flycheck-define-checker proselint
	  "A linter for prose."
	  :command ("proselint" source-inplace)
	  :error-patterns
	  ((warning line-start (file-name) ":" line ":" column ": "
				(id (one-or-more (not (any " "))))
				(message (one-or-more not-newline)
						 (zero-or-more "\n" (any " ") (one-or-more not-newline)))
				line-end))
	  :modes (text-mode markdown-mode gfm-mode org-mode))
#+END_SRC

** Autocomplete
#+BEGIN_SRC emacs-lisp
	(use-package company
	  :ensure t
	  :diminish
	  :config
	  (add-hook 'after-init-hook 'global-company-mode)

	  (setq company-idle-delay t)

	  (use-package company-go
		:ensure t
		:config
		(add-to-list 'company-backends 'company-go))

	  (use-package company-anaconda
		:ensure t
		:config
		(add-to-list 'company-backends 'company-anaconda)))
#+END_SRC

disable auto lowercase
#+BEGIN_SRC emacs-lisp
  (setq company-dabbrev-downcase nil)
#+END_SRC


* Project management
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
          :ensure t
          :config
          (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
          (projectile-mode +1))
#+END_SRC

** Integrate projectile with ivy
#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
#+END_SRC

** Extra completion
#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
	  :ensure t
	  :config
	  (add-hook 'after-init-hook 'counsel-projectile-mode))
#+END_SRC

** Fuzzy search
#+BEGIN_SRC emacs-lisp
  (use-package fzf
	  :ensure t)
#+END_SRC

** Environment management
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
	  :ensure t
	  :config
	  (exec-path-from-shell-initialize))
#+END_SRC

** Jump to source
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
	  :ensure t
	  :diminish dumb-jump-mode
	  :bind (("C-M-g" . dumb-jump-go)
			 ("C-M-b" . dumb-jump-back)
			 ("C-M-l" . dumb-jump-quick-look)))
#+END_SRC

** Git
Install magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
	  :ensure t
	  :bind ("C-x g" . magit-status))
#+END_SRC

Display line changes
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
	  :ensure t
	  :config
	  (global-git-gutter-mode 't)
	  :diminish git-gutter-mode)
#+END_SRC

Time machine
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
	  :ensure t)
#+END_SRC


* Python
** anaconda mode
#+BEGIN_SRC emacs-lisp
  (use-package anaconda-mode
	  :ensure t
	  :config
	  (add-hook 'python-mode-hook 'anaconda-mode)
	  (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
#+END_SRC


* C++
** irony mode
#+BEGIN_SRC emacs-lisp
  (use-package irony
	  :ensure t
	  :hook (c-mode . irony-mode))
#+END_SRC

** company
#+BEGIN_SRC emacs-lisp
  (use-package company-irony
	  :ensure t
	  :config
	  (add-to-list 'company-backends 'company-irony))
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
	  :ensure t
	  :hook (flycheck-mode . flycheck-irony-setup))
#+END_SRC

** google c style
#+BEGIN_SRC emacs-lisp
  ;;; google-c-style.el --- Google's C/C++ style for c-mode

  ;; Keywords: c, tools

  ;; google-c-style.el is Copyright (C) 2008 Google Inc. All Rights Reserved.
  ;;
  ;; It is free software; you can redistribute it and/or modify it under the
  ;; terms of either:
  ;;
  ;; a) the GNU General Public License as published by the Free Software
  ;; Foundation; either version 1, or (at your option) any later version, or
  ;;
  ;; b) the "Artistic License".

  ;;; Commentary:

  ;; Provides the google C/C++ coding style. You may wish to add
  ;; `google-set-c-style' to your `c-mode-common-hook' after requiring this
  ;; file. For example:
  ;;
  ;;    (add-hook 'c-mode-common-hook 'google-set-c-style)
  ;;
  ;; If you want the RETURN key to go to the next line and space over
  ;; to the right place, add this to your .emacs right after the load-file:
  ;;
  ;;    (add-hook 'c-mode-common-hook 'google-make-newline-indent)

  ;;; Code:

  ;; For some reason 1) c-backward-syntactic-ws is a macro and 2)  under Emacs 22
  ;; bytecode cannot call (unexpanded) macros at run time:
  (eval-when-compile (require 'cc-defs))

  ;; Wrapper function needed for Emacs 21 and XEmacs (Emacs 22 offers the more
  ;; elegant solution of composing a list of lineup functions or quantities with
  ;; operators such as "add")
  (defun google-c-lineup-expression-plus-4 (langelem)
    "Indents to the beginning of the current C expression plus 4 spaces.

  This implements title \"Function Declarations and Definitions\"
  of the Google C++ Style Guide for the case where the previous
  line ends with an open parenthese.

  \"Current C expression\", as per the Google Style Guide and as
  clarified by subsequent discussions, means the whole expression
  regardless of the number of nested parentheses, but excluding
  non-expression material such as \"if(\" and \"for(\" control
  structures.

  Suitable for inclusion in `c-offsets-alist'."
    (save-excursion
      (back-to-indentation)
      ;; Go to beginning of *previous* line:
      (c-backward-syntactic-ws)
      (back-to-indentation)
      (cond
       ;; We are making a reasonable assumption that if there is a control
       ;; structure to indent past, it has to be at the beginning of the line.
       ((looking-at "\\(\\(if\\|for\\|while\\)\\s *(\\)")
        (goto-char (match-end 1)))
       ;; For constructor initializer lists, the reference point for line-up is
       ;; the token after the initial colon.
       ((looking-at ":\\s *")
        (goto-char (match-end 0))))
      (vector (+ 4 (current-column)))))

  ;;;###autoload
  (defconst google-c-style
    `((c-recognize-knr-p . nil)
      (c-enable-xemacs-performance-kludge-p . t) ; speed up indentation in XEmacs
      (c-basic-offset . 2)
      (indent-tabs-mode . nil)
      (c-comment-only-line-offset . 0)
      (c-hanging-braces-alist . ((defun-open after)
                                 (defun-close before after)
                                 (class-open after)
                                 (class-close before after)
                                 (inexpr-class-open after)
                                 (inexpr-class-close before)
                                 (namespace-open after)
                                 (inline-open after)
                                 (inline-close before after)
                                 (block-open after)
                                 (block-close . c-snug-do-while)
                                 (extern-lang-open after)
                                 (extern-lang-close after)
                                 (statement-case-open after)
                                 (substatement-open after)))
      (c-hanging-colons-alist . ((case-label)
                                 (label after)
                                 (access-label after)
                                 (member-init-intro before)
                                 (inher-intro)))
      (c-hanging-semi&comma-criteria
       . (c-semi&comma-no-newlines-for-oneline-inliners
          c-semi&comma-inside-parenlist
          c-semi&comma-no-newlines-before-nonblanks))
      (c-indent-comments-syntactically-p . t)
      (comment-column . 40)
      (c-indent-comment-alist . ((other . (space . 2))))
      (c-cleanup-list . (brace-else-brace
                         brace-elseif-brace
                         brace-catch-brace
                         empty-defun-braces
                         defun-close-semi
                         list-close-comma
                         scope-operator))
      (c-offsets-alist . ((arglist-intro google-c-lineup-expression-plus-4)
                          (func-decl-cont . ++)
                          (member-init-intro . ++)
                          (inher-intro . ++)
                          (comment-intro . 0)
                          (arglist-close . c-lineup-arglist)
                          (topmost-intro . 0)
                          (block-open . 0)
                          (inline-open . 0)
                          (substatement-open . 0)
                          (statement-cont
                           .
                           (,(when (fboundp 'c-no-indent-after-java-annotations)
                               'c-no-indent-after-java-annotations)
                            ,(when (fboundp 'c-lineup-assignments)
                               'c-lineup-assignments)
                            ++))
                          (label . /)
                          (case-label . +)
                          (statement-case-open . +)
                          (statement-case-intro . +) ; case w/o {
                          (access-label . /)
                          (innamespace . 0))))
    "Google C/C++ Programming Style.")

  ;;;###autoload
  (defun google-set-c-style ()
    "Set the current buffer's c-style to Google C/C++ Programming
    Style. Meant to be added to `c-mode-common-hook'."
    (interactive)
    (make-local-variable 'c-tab-always-indent)
    (setq c-tab-always-indent t)
    (c-add-style "Google" google-c-style t))

  ;;;###autoload
  (defun google-make-newline-indent ()
    "Sets up preferred newline behavior. Not set by default. Meant
    to be added to `c-mode-common-hook'."
    (interactive)
    (define-key c-mode-base-map "\C-m" 'newline-and-indent)
    (define-key c-mode-base-map [ret] 'newline-and-indent))

  (provide 'google-c-style)
  ;;; google-c-style.el ends here
#+END_SRC

activate google c++ style
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook 'google-set-c-style)
  (add-hook 'c-mode-common-hook 'google-make-newline-indent)
#+END_SRC

** clang-format
#+BEGIN_SRC emacs-lisp
  (use-package clang-format)

  (add-hook 'c-mode-common-hook
            (function (lambda ()
                      (add-hook 'before-save-hook
                                'clang-format-buffer))))
#+END_SRC


* Utils
** Writing
#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
	  :ensure t
	  :bind ("C-c g" . writegood-mode)
	  :config
	  (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

** Stack Overflow
#+BEGIN_SRC emacs-lisp
  (use-package sx
	  :ensure t
	  :config
	  (bind-keys :prefix "C-c s"
				 :prefix-map my-sx-map
				 :prefix-docstring "Global keymap for SX."
				 ("q" . sx-tab-all-questions)
				 ("i" . sx-inbox)
				 ("o" . sx-open-link)
				 ("u" . sx-tab-unanswered-my-tags)
				 ("a" . sx-ask)
				 ("s" . sx-search)))
#+END_SRC

** Slack
#+BEGIN_SRC emacs-lisp
  (use-package slack
	  :ensure t
	  :commands (slack-start))
#+END_SRC

** Google
#+BEGIN_SRC emacs-lisp
  (use-package google-this
	  :ensure t)
#+END_SRC


